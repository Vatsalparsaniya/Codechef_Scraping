#include<bits/stdc++.h>
using namespace std;

#define tcase                     lli t;cin>>t;while(t--)
#define endl                      '\n'

#define fast_io  ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);

#define lli long long int
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            LOGIC FUNCTION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void solve(){
    tcase{
        lli N;
        cin>>N;
        lli C[N]={0};
        for(lli i=0;i<N;i++){
            lli temp;
            cin>>temp;
            lli min = (i-temp>0)?i-temp:0;
            lli max = (i+1+temp>=N)?0:i+1+temp;
            // cout<<"min : "<<min<<endl;
            // cout<<"max : "<<max<<endl;
            C[min]++;
            if(!max)
                continue;
            C[max]--;

        }
        // for(lli j=0;j<N;j++)
        //     cout<<" "<<C[j];
        // cout<<endl;
        lli H[N]={0};
        for(lli i=0;i<N;i++)
            cin>>H[i];
        lli radiation[N];
        radiation[0] = C[0];
        for(lli i=1;i<N;i++){
            radiation[i] = radiation[i-1] + C[i];
        }
        sort(radiation,radiation+N);
        sort(H,H+N);
        bool isEqual = true;
        for(int i=0;i<N;i++){
            if(radiation[i] != H[i]){
                isEqual = false;
                break;
            }
        }
        if(isEqual)
            cout<<"YES"<<endl;
        else
            cout<<"NO"<<endl;
    }
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        END OF LOGIC FUNCTION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
int main() {
    //fast_io;
    //bool testing = true;
    bool testing = false;
    if(testing) {
        freopen("test.txt","rt",stdin);
        cout<<".......Debug From test.txt File......."<<endl;
		auto start = chrono::high_resolution_clock::now();

		solve();

		auto end = chrono::high_resolution_clock::now();
        double time_taken = chrono::duration_cast<chrono::nanoseconds>(end - start).count();
        time_taken *= 1e-9;
        cout << "Time taken by program is : " << fixed << time_taken << setprecision(9);
         cout << " sec" << endl;
    }
    else {
        solve();
    }
}
